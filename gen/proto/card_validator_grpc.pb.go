// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/card_validator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CardValidator_ValidateCard_FullMethodName = "/api.CardValidator/ValidateCard"
)

// CardValidatorClient is the client API for CardValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardValidatorClient interface {
	ValidateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*CardValidationResponse, error)
}

type cardValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCardValidatorClient(cc grpc.ClientConnInterface) CardValidatorClient {
	return &cardValidatorClient{cc}
}

func (c *cardValidatorClient) ValidateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*CardValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardValidationResponse)
	err := c.cc.Invoke(ctx, CardValidator_ValidateCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardValidatorServer is the server API for CardValidator service.
// All implementations must embed UnimplementedCardValidatorServer
// for forward compatibility
type CardValidatorServer interface {
	ValidateCard(context.Context, *Card) (*CardValidationResponse, error)
	mustEmbedUnimplementedCardValidatorServer()
}

// UnimplementedCardValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedCardValidatorServer struct {
}

func (UnimplementedCardValidatorServer) ValidateCard(context.Context, *Card) (*CardValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCard not implemented")
}
func (UnimplementedCardValidatorServer) mustEmbedUnimplementedCardValidatorServer() {}

// UnsafeCardValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardValidatorServer will
// result in compilation errors.
type UnsafeCardValidatorServer interface {
	mustEmbedUnimplementedCardValidatorServer()
}

func RegisterCardValidatorServer(s grpc.ServiceRegistrar, srv CardValidatorServer) {
	s.RegisterService(&CardValidator_ServiceDesc, srv)
}

func _CardValidator_ValidateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardValidatorServer).ValidateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardValidator_ValidateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardValidatorServer).ValidateCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

// CardValidator_ServiceDesc is the grpc.ServiceDesc for CardValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CardValidator",
	HandlerType: (*CardValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateCard",
			Handler:    _CardValidator_ValidateCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/card_validator.proto",
}
